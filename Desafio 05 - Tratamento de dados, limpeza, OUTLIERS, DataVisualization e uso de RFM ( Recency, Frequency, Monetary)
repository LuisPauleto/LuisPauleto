{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/LuisPauleto/LuisPauleto/blob/main/Desafio%2005%20-%20Tratamento%20de%20dados%2C%20limpeza%2C%20OUTLIERS%2C%20DataVisualization%20e%20uso%20de%20RFM%20(%20Recency%2C%20Frequency%2C%20Monetary)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 520
        },
        "id": "lRm4sI_W7AMx",
        "outputId": "c082bcd2-cc28-44fc-916d-bc55d4ab4646"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   InvoiceNo StockCode                          Description  Quantity  \\\n",
              "0     536365    85123A   WHITE HANGING HEART T-LIGHT HOLDER         6   \n",
              "1     536365     71053                  WHITE METAL LANTERN         6   \n",
              "2     536365    84406B       CREAM CUPID HEARTS COAT HANGER         8   \n",
              "3     536365    84029G  KNITTED UNION FLAG HOT WATER BOTTLE         6   \n",
              "4     536365    84029E       RED WOOLLY HOTTIE WHITE HEART.         6   \n",
              "5     536365     22752         SET 7 BABUSHKA NESTING BOXES         2   \n",
              "6     536365     21730    GLASS STAR FROSTED T-LIGHT HOLDER         6   \n",
              "7     536366     22633               HAND WARMER UNION JACK         6   \n",
              "8     536366     22632            HAND WARMER RED POLKA DOT         6   \n",
              "9     536367     84879        ASSORTED COLOUR BIRD ORNAMENT        32   \n",
              "10    536367     22745           POPPY'S PLAYHOUSE BEDROOM          6   \n",
              "11    536367     22748            POPPY'S PLAYHOUSE KITCHEN         6   \n",
              "12    536367     22749    FELTCRAFT PRINCESS CHARLOTTE DOLL         8   \n",
              "13    536367     22310              IVORY KNITTED MUG COSY          6   \n",
              "14    536367     84969   BOX OF 6 ASSORTED COLOUR TEASPOONS         6   \n",
              "\n",
              "       InvoiceDate  UnitPrice  CustomerID         Country  \n",
              "0   12/1/2010 8:26       2.55     17850.0  United Kingdom  \n",
              "1   12/1/2010 8:26       3.39     17850.0  United Kingdom  \n",
              "2   12/1/2010 8:26       2.75     17850.0  United Kingdom  \n",
              "3   12/1/2010 8:26       3.39     17850.0  United Kingdom  \n",
              "4   12/1/2010 8:26       3.39     17850.0  United Kingdom  \n",
              "5   12/1/2010 8:26       7.65     17850.0  United Kingdom  \n",
              "6   12/1/2010 8:26       4.25     17850.0  United Kingdom  \n",
              "7   12/1/2010 8:28       1.85     17850.0  United Kingdom  \n",
              "8   12/1/2010 8:28       1.85     17850.0  United Kingdom  \n",
              "9   12/1/2010 8:34       1.69     13047.0  United Kingdom  \n",
              "10  12/1/2010 8:34       2.10     13047.0  United Kingdom  \n",
              "11  12/1/2010 8:34       2.10     13047.0  United Kingdom  \n",
              "12  12/1/2010 8:34       3.75     13047.0  United Kingdom  \n",
              "13  12/1/2010 8:34       1.65     13047.0  United Kingdom  \n",
              "14  12/1/2010 8:34       4.25     13047.0  United Kingdom  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a5199071-54a7-4dc1-8bdd-118949084b70\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>InvoiceNo</th>\n",
              "      <th>StockCode</th>\n",
              "      <th>Description</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>InvoiceDate</th>\n",
              "      <th>UnitPrice</th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Country</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>536365</td>\n",
              "      <td>85123A</td>\n",
              "      <td>WHITE HANGING HEART T-LIGHT HOLDER</td>\n",
              "      <td>6</td>\n",
              "      <td>12/1/2010 8:26</td>\n",
              "      <td>2.55</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>536365</td>\n",
              "      <td>71053</td>\n",
              "      <td>WHITE METAL LANTERN</td>\n",
              "      <td>6</td>\n",
              "      <td>12/1/2010 8:26</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>536365</td>\n",
              "      <td>84406B</td>\n",
              "      <td>CREAM CUPID HEARTS COAT HANGER</td>\n",
              "      <td>8</td>\n",
              "      <td>12/1/2010 8:26</td>\n",
              "      <td>2.75</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>536365</td>\n",
              "      <td>84029G</td>\n",
              "      <td>KNITTED UNION FLAG HOT WATER BOTTLE</td>\n",
              "      <td>6</td>\n",
              "      <td>12/1/2010 8:26</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>536365</td>\n",
              "      <td>84029E</td>\n",
              "      <td>RED WOOLLY HOTTIE WHITE HEART.</td>\n",
              "      <td>6</td>\n",
              "      <td>12/1/2010 8:26</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>536365</td>\n",
              "      <td>22752</td>\n",
              "      <td>SET 7 BABUSHKA NESTING BOXES</td>\n",
              "      <td>2</td>\n",
              "      <td>12/1/2010 8:26</td>\n",
              "      <td>7.65</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>536365</td>\n",
              "      <td>21730</td>\n",
              "      <td>GLASS STAR FROSTED T-LIGHT HOLDER</td>\n",
              "      <td>6</td>\n",
              "      <td>12/1/2010 8:26</td>\n",
              "      <td>4.25</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>536366</td>\n",
              "      <td>22633</td>\n",
              "      <td>HAND WARMER UNION JACK</td>\n",
              "      <td>6</td>\n",
              "      <td>12/1/2010 8:28</td>\n",
              "      <td>1.85</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>536366</td>\n",
              "      <td>22632</td>\n",
              "      <td>HAND WARMER RED POLKA DOT</td>\n",
              "      <td>6</td>\n",
              "      <td>12/1/2010 8:28</td>\n",
              "      <td>1.85</td>\n",
              "      <td>17850.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>536367</td>\n",
              "      <td>84879</td>\n",
              "      <td>ASSORTED COLOUR BIRD ORNAMENT</td>\n",
              "      <td>32</td>\n",
              "      <td>12/1/2010 8:34</td>\n",
              "      <td>1.69</td>\n",
              "      <td>13047.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>536367</td>\n",
              "      <td>22745</td>\n",
              "      <td>POPPY'S PLAYHOUSE BEDROOM</td>\n",
              "      <td>6</td>\n",
              "      <td>12/1/2010 8:34</td>\n",
              "      <td>2.10</td>\n",
              "      <td>13047.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>536367</td>\n",
              "      <td>22748</td>\n",
              "      <td>POPPY'S PLAYHOUSE KITCHEN</td>\n",
              "      <td>6</td>\n",
              "      <td>12/1/2010 8:34</td>\n",
              "      <td>2.10</td>\n",
              "      <td>13047.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>536367</td>\n",
              "      <td>22749</td>\n",
              "      <td>FELTCRAFT PRINCESS CHARLOTTE DOLL</td>\n",
              "      <td>8</td>\n",
              "      <td>12/1/2010 8:34</td>\n",
              "      <td>3.75</td>\n",
              "      <td>13047.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>536367</td>\n",
              "      <td>22310</td>\n",
              "      <td>IVORY KNITTED MUG COSY</td>\n",
              "      <td>6</td>\n",
              "      <td>12/1/2010 8:34</td>\n",
              "      <td>1.65</td>\n",
              "      <td>13047.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>536367</td>\n",
              "      <td>84969</td>\n",
              "      <td>BOX OF 6 ASSORTED COLOUR TEASPOONS</td>\n",
              "      <td>6</td>\n",
              "      <td>12/1/2010 8:34</td>\n",
              "      <td>4.25</td>\n",
              "      <td>13047.0</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a5199071-54a7-4dc1-8bdd-118949084b70')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a5199071-54a7-4dc1-8bdd-118949084b70 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a5199071-54a7-4dc1-8bdd-118949084b70');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6d6f4682-2d76-46ad-9a83-be98a1fcbd28\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6d6f4682-2d76-46ad-9a83-be98a1fcbd28')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6d6f4682-2d76-46ad-9a83-be98a1fcbd28 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 49912,\n  \"fields\": [\n    {\n      \"column\": \"InvoiceNo\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2335,\n        \"samples\": [\n          \"540003\",\n          \"539391\",\n          \"540276\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"StockCode\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2877,\n        \"samples\": [\n          \"84968C\",\n          \"22609\",\n          \"21172\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Description\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2815,\n        \"samples\": [\n          \"CERAMIC PIRATE CHEST MONEY BANK\",\n          \"3D HEARTS  HONEYCOMB PAPER GARLAND\",\n          \"MOCK LOBSTER FRIDGE MAGNET\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Quantity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 55,\n        \"min\": -9360,\n        \"max\": 2880,\n        \"num_unique_values\": 214,\n        \"samples\": [\n          18,\n          1296,\n          108\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InvoiceDate\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 2060,\n        \"samples\": [\n          \"12/15/2010 13:37\",\n          \"12/7/2010 12:03\",\n          \"12/15/2010 15:50\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"UnitPrice\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 166.65311985436995,\n        \"min\": 0.0,\n        \"max\": 16888.02,\n        \"num_unique_values\": 314,\n        \"samples\": [\n          7.25,\n          4.65,\n          10.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CustomerID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1752.3002788621363,\n        \"min\": 12347.0,\n        \"max\": 18283.0,\n        \"num_unique_values\": 1038,\n        \"samples\": [\n          15093.0,\n          17090.0,\n          16011.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 24,\n        \"samples\": [\n          \"Spain\",\n          \"Channel Islands\",\n          \"United Kingdom\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "# importação das bibliotecas\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "#importação do arquivo CSV\n",
        "df = pd.read_csv('data.csv' , encoding='unicode_escape')\n",
        "\n",
        "\n",
        "df.head(15)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "m9uNMrCA_-gP",
        "outputId": "fe9f3970-61d2-42fa-a643-2b6cf31e2106"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Quantity     UnitPrice    CustomerID\n",
              "count  49912.000000  49911.000000  32030.000000\n",
              "mean       8.294218      6.423712  15426.016422\n",
              "std       55.576019    166.653120   1752.300279\n",
              "min    -9360.000000      0.000000  12347.000000\n",
              "25%        1.000000      1.250000  14057.000000\n",
              "50%        2.000000      2.510000  15464.000000\n",
              "75%        8.000000      4.250000  17041.000000\n",
              "max     2880.000000  16888.020000  18283.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2e71b4e5-64f8-4c64-b062-a97084baef45\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Quantity</th>\n",
              "      <th>UnitPrice</th>\n",
              "      <th>CustomerID</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>49912.000000</td>\n",
              "      <td>49911.000000</td>\n",
              "      <td>32030.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>8.294218</td>\n",
              "      <td>6.423712</td>\n",
              "      <td>15426.016422</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>55.576019</td>\n",
              "      <td>166.653120</td>\n",
              "      <td>1752.300279</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>-9360.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>12347.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.250000</td>\n",
              "      <td>14057.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.510000</td>\n",
              "      <td>15464.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>8.000000</td>\n",
              "      <td>4.250000</td>\n",
              "      <td>17041.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>2880.000000</td>\n",
              "      <td>16888.020000</td>\n",
              "      <td>18283.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2e71b4e5-64f8-4c64-b062-a97084baef45')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2e71b4e5-64f8-4c64-b062-a97084baef45 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2e71b4e5-64f8-4c64-b062-a97084baef45');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c660da6d-aa50-44ac-b8ca-db4151c37138\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c660da6d-aa50-44ac-b8ca-db4151c37138')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c660da6d-aa50-44ac-b8ca-db4151c37138 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Quantity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18324.491810403386,\n        \"min\": -9360.0,\n        \"max\": 49912.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          8.294217823369129,\n          2.0,\n          49912.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"UnitPrice\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17790.64417876361,\n        \"min\": 0.0,\n        \"max\": 49911.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6.42371220772976,\n          2.51,\n          49911.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CustomerID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8312.384522585691,\n        \"min\": 1752.3002788621363,\n        \"max\": 32030.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          15426.016422104278,\n          15464.0,\n          32030.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ],
      "source": [
        "#descrevendo os dados\n",
        "df.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fAk8AjYX8oqh",
        "outputId": "b01270fd-a8df-4139-d02f-f02ce54d143e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 49912 entries, 0 to 49911\n",
            "Data columns (total 8 columns):\n",
            " #   Column       Non-Null Count  Dtype  \n",
            "---  ------       --------------  -----  \n",
            " 0   InvoiceNo    49912 non-null  object \n",
            " 1   StockCode    49912 non-null  object \n",
            " 2   Description  49770 non-null  object \n",
            " 3   Quantity     49912 non-null  int64  \n",
            " 4   InvoiceDate  49912 non-null  object \n",
            " 5   UnitPrice    49911 non-null  float64\n",
            " 6   CustomerID   32030 non-null  float64\n",
            " 7   Country      49911 non-null  object \n",
            "dtypes: float64(2), int64(1), object(5)\n",
            "memory usage: 3.0+ MB\n"
          ]
        }
      ],
      "source": [
        "#Verificando os tipos de dados presentes no DataSet.\n",
        "df.info()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jh3PA5THHu63"
      },
      "outputs": [],
      "source": [
        "#Verificando as duplicadas\n",
        "num_duplicatas = df.duplicated().sum()\n",
        "\n",
        "\n",
        "df = df.drop_duplicates()\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "id": "g5UdkBI7tl_A",
        "outputId": "345e01fc-6c18-49d7-db57-35de63f9bbdb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "datetime64[ns]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  InvoiceNo StockCode                          Description  Quantity  \\\n",
              "0    536365    85123A   WHITE HANGING HEART T-LIGHT HOLDER         6   \n",
              "1    536365     71053                  WHITE METAL LANTERN         6   \n",
              "2    536365    84406B       CREAM CUPID HEARTS COAT HANGER         8   \n",
              "3    536365    84029G  KNITTED UNION FLAG HOT WATER BOTTLE         6   \n",
              "4    536365    84029E       RED WOOLLY HOTTIE WHITE HEART.         6   \n",
              "\n",
              "          InvoiceDate  UnitPrice  CustomerID         Country  \n",
              "0 2010-12-01 08:26:00       2.55       17850  United Kingdom  \n",
              "1 2010-12-01 08:26:00       3.39       17850  United Kingdom  \n",
              "2 2010-12-01 08:26:00       2.75       17850  United Kingdom  \n",
              "3 2010-12-01 08:26:00       3.39       17850  United Kingdom  \n",
              "4 2010-12-01 08:26:00       3.39       17850  United Kingdom  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0e558dc8-8256-44f5-aa59-8129160ef145\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>InvoiceNo</th>\n",
              "      <th>StockCode</th>\n",
              "      <th>Description</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>InvoiceDate</th>\n",
              "      <th>UnitPrice</th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Country</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>536365</td>\n",
              "      <td>85123A</td>\n",
              "      <td>WHITE HANGING HEART T-LIGHT HOLDER</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>2.55</td>\n",
              "      <td>17850</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>536365</td>\n",
              "      <td>71053</td>\n",
              "      <td>WHITE METAL LANTERN</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>536365</td>\n",
              "      <td>84406B</td>\n",
              "      <td>CREAM CUPID HEARTS COAT HANGER</td>\n",
              "      <td>8</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>2.75</td>\n",
              "      <td>17850</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>536365</td>\n",
              "      <td>84029G</td>\n",
              "      <td>KNITTED UNION FLAG HOT WATER BOTTLE</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>536365</td>\n",
              "      <td>84029E</td>\n",
              "      <td>RED WOOLLY HOTTIE WHITE HEART.</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850</td>\n",
              "      <td>United Kingdom</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0e558dc8-8256-44f5-aa59-8129160ef145')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0e558dc8-8256-44f5-aa59-8129160ef145 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0e558dc8-8256-44f5-aa59-8129160ef145');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e4c239a4-80f0-4337-9036-7efb4c6feb23\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e4c239a4-80f0-4337-9036-7efb4c6feb23')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e4c239a4-80f0-4337-9036-7efb4c6feb23 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"## NECESSITA AJUSTES\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"InvoiceNo\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"536365\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"StockCode\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"71053\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Description\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"WHITE METAL LANTERN\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Quantity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 6,\n        \"max\": 8,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InvoiceDate\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-12-01 08:26:00\",\n        \"max\": \"2010-12-01 08:26:00\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"2010-12-01 08:26:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"UnitPrice\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.41143650785996144,\n        \"min\": 2.55,\n        \"max\": 3.39,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2.55\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CustomerID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 17850,\n        \"max\": 17850,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          17850\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"United Kingdom\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ],
      "source": [
        "# Converta para datetime\n",
        "df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'], format='%m/%d/%Y %H:%M')\n",
        "\n",
        "# Verifique o tipo de dados\n",
        "print(df['InvoiceDate'].dtype)\n",
        "\n",
        "\n",
        "\n",
        "#InvoiceNo to STR\n",
        "\n",
        "\n",
        "# CustomerID --> int\n",
        "\n",
        "df['CustomerID'] = df['CustomerID'].fillna(0).astype(int)\n",
        "\n",
        "#row 12461\n",
        "\n",
        "df.head()\n",
        "\n",
        "\n",
        "## NECESSITA AJUSTES\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "x39vsCb4WYqz",
        "outputId": "861648e7-df47-4d88-9880-2bce556dcd58"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  InvoiceNo StockCode                          Description  Quantity  \\\n",
              "0    536365    85123A   WHITE HANGING HEART T-LIGHT HOLDER         6   \n",
              "1    536365     71053                  WHITE METAL LANTERN         6   \n",
              "2    536365    84406B       CREAM CUPID HEARTS COAT HANGER         8   \n",
              "3    536365    84029G  KNITTED UNION FLAG HOT WATER BOTTLE         6   \n",
              "4    536365    84029E       RED WOOLLY HOTTIE WHITE HEART.         6   \n",
              "\n",
              "          InvoiceDate  UnitPrice  CustomerID         Country  Total    Month  \n",
              "0 2010-12-01 08:26:00       2.55       17850  United Kingdom  15.30  2010-12  \n",
              "1 2010-12-01 08:26:00       3.39       17850  United Kingdom  20.34  2010-12  \n",
              "2 2010-12-01 08:26:00       2.75       17850  United Kingdom  22.00  2010-12  \n",
              "3 2010-12-01 08:26:00       3.39       17850  United Kingdom  20.34  2010-12  \n",
              "4 2010-12-01 08:26:00       3.39       17850  United Kingdom  20.34  2010-12  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9f3d5ace-dd38-472d-9023-5e55c6c7b71f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>InvoiceNo</th>\n",
              "      <th>StockCode</th>\n",
              "      <th>Description</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>InvoiceDate</th>\n",
              "      <th>UnitPrice</th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Country</th>\n",
              "      <th>Total</th>\n",
              "      <th>Month</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>536365</td>\n",
              "      <td>85123A</td>\n",
              "      <td>WHITE HANGING HEART T-LIGHT HOLDER</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>2.55</td>\n",
              "      <td>17850</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>15.30</td>\n",
              "      <td>2010-12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>536365</td>\n",
              "      <td>71053</td>\n",
              "      <td>WHITE METAL LANTERN</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>20.34</td>\n",
              "      <td>2010-12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>536365</td>\n",
              "      <td>84406B</td>\n",
              "      <td>CREAM CUPID HEARTS COAT HANGER</td>\n",
              "      <td>8</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>2.75</td>\n",
              "      <td>17850</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>22.00</td>\n",
              "      <td>2010-12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>536365</td>\n",
              "      <td>84029G</td>\n",
              "      <td>KNITTED UNION FLAG HOT WATER BOTTLE</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>20.34</td>\n",
              "      <td>2010-12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>536365</td>\n",
              "      <td>84029E</td>\n",
              "      <td>RED WOOLLY HOTTIE WHITE HEART.</td>\n",
              "      <td>6</td>\n",
              "      <td>2010-12-01 08:26:00</td>\n",
              "      <td>3.39</td>\n",
              "      <td>17850</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>20.34</td>\n",
              "      <td>2010-12</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9f3d5ace-dd38-472d-9023-5e55c6c7b71f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9f3d5ace-dd38-472d-9023-5e55c6c7b71f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9f3d5ace-dd38-472d-9023-5e55c6c7b71f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ab8b01ab-4e68-410e-a038-0d407c320bf0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ab8b01ab-4e68-410e-a038-0d407c320bf0')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ab8b01ab-4e68-410e-a038-0d407c320bf0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 49375,\n  \"fields\": [\n    {\n      \"column\": \"InvoiceNo\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2335,\n        \"samples\": [\n          \"540003\",\n          \"539391\",\n          \"540276\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"StockCode\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2877,\n        \"samples\": [\n          \"84968C\",\n          \"22609\",\n          \"21172\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Description\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2815,\n        \"samples\": [\n          \"CERAMIC PIRATE CHEST MONEY BANK\",\n          \"3D HEARTS  HONEYCOMB PAPER GARLAND\",\n          \"MOCK LOBSTER FRIDGE MAGNET\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Quantity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 55,\n        \"min\": -9360,\n        \"max\": 2880,\n        \"num_unique_values\": 214,\n        \"samples\": [\n          18,\n          1296,\n          108\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"InvoiceDate\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-12-01 08:26:00\",\n        \"max\": \"2011-01-09 14:36:00\",\n        \"num_unique_values\": 2060,\n        \"samples\": [\n          \"2010-12-15 13:37:00\",\n          \"2010-12-07 12:03:00\",\n          \"2010-12-15 15:50:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"UnitPrice\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 167.55634657496117,\n        \"min\": 0.0,\n        \"max\": 16888.02,\n        \"num_unique_values\": 314,\n        \"samples\": [\n          7.25,\n          4.65,\n          10.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CustomerID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7540,\n        \"min\": 0,\n        \"max\": 18283,\n        \"num_unique_values\": 1039,\n        \"samples\": [\n          13034,\n          15615,\n          15555\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 24,\n        \"samples\": [\n          \"Spain\",\n          \"Channel Islands\",\n          \"United Kingdom\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 92.15751879599377,\n        \"min\": 0.14,\n        \"max\": 13541.33,\n        \"num_unique_values\": 1511,\n        \"samples\": [\n          56.099999999999994,\n          83.88,\n          29.53\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Month\",\n      \"properties\": {\n        \"dtype\": \"period[M]\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"2011-01\",\n          \"2010-12\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 63
        }
      ],
      "source": [
        "#tratando os dados\n",
        "\n",
        "#removendo NaN\n",
        "df.isna().sum()\n",
        "\n",
        "df_limpo = df.dropna()\n",
        "\n",
        "#Filtando quantidades e preços maiores do que 0\n",
        "df_filtrado = df[df['UnitPrice'] > 0]\n",
        "df_filtrad = df[df['Quantity'] > 0]\n",
        "\n",
        "\n",
        "#Criação da nova coluna com o total\n",
        "df['Total'] = df_filtrado['UnitPrice'] * df_filtrad['Quantity']\n",
        "\n",
        "\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 268
        },
        "id": "u1A9ZlXy_vWZ",
        "outputId": "21151eb1-6062-4f74-81b1-266031220654"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 64
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 200x200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#Outliers\n",
        "df.plot.box()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Remover outliers extremos\n",
        "df_sem_outliers = df[(df['Quantity'] <= 10000) & (df['UnitPrice'] <= 5000)]\n",
        "\n",
        "# Visualizar os dados sem outliers\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Scatter plot para visualizar os dados sem outliers\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.scatterplot(data=df_sem_outliers, x='Quantity', y='UnitPrice')\n",
        "plt.title('Dados sem Outliers')\n",
        "plt.xlabel('Quantidade')\n",
        "plt.ylabel('Preço Unitário')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 685
        },
        "id": "JILzgNosCZyk",
        "outputId": "fee686b9-614b-4b00-cc65-9bebaa921bb4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 391
        },
        "id": "9llbzm2kHqtd",
        "outputId": "a9350800-61eb-48b2-884e-bd8721f3df0d"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 200x200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#Top 10 países com maior valor em vendas\n",
        "top_pais = df.groupby('Country')['Total'].sum()\n",
        "\n",
        "top_pais = top_pais.sort_values(ascending=False).head(10)\n",
        "\n",
        "plt.bar(top_pais.index, top_pais.values)\n",
        "\n",
        "# Adicione rótulos e título\n",
        "plt.xlabel('País')\n",
        "plt.ylabel('Valor em Vendas')\n",
        "plt.title('Top 10 Países')\n",
        "plt.xticks(rotation=90)\n",
        "plt.yticks(range(0, int(top_pais.max()), 50000))\n",
        "\n",
        "# Exiba o histograma\n",
        "plt.show()\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8AvgRCv-U-QQ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 566
        },
        "outputId": "53c824cb-32fa-4090-f5c9-46f7efb38411"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 200x200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#Top 10 produtos mais vendidos\n",
        "top_produtos = df.groupby('Description')['Total'].sum()\n",
        "\n",
        "top_produtos = top_produtos.sort_values(ascending=False).head(10)\n",
        "\n",
        "plt.bar(top_produtos.index, top_produtos.values)\n",
        "\n",
        "# Adicione rótulos e título\n",
        "plt.xlabel('Produtos')\n",
        "plt.ylabel('Quantidade de Vendas')\n",
        "plt.title('Top 10 Países')\n",
        "plt.xticks(rotation=90)\n",
        "\n",
        "# Exiba o histograma\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        },
        "id": "qYKZk9CsVT9e",
        "outputId": "16d556ae-b1c6-4860-f171-4db10fd45bc8"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 200x200 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "\n",
        "#Valor de venda total por mês\n",
        "df['Month'] = df['InvoiceDate'].dt.to_period('M')\n",
        "\n",
        "top_vendas = df.groupby('Month')['Total'].sum()\n",
        "\n",
        "top_vendas = top_vendas.sort_values(ascending=False)\n",
        "\n",
        "top_vendas.head(10)\n",
        "\n",
        "plt.bar(top_vendas.head(2).index.astype(str), top_vendas.head(2).values)\n",
        "\n",
        "# Adicione rótulos e título\n",
        "plt.xlabel('Mês')\n",
        "plt.ylabel('Valor de Venda Total')\n",
        "plt.title('Top Vendas')\n",
        "\n",
        "# Exiba o gráfico de barras\n",
        "plt.show()\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 843
        },
        "id": "xjjvaEIqXR-D",
        "outputId": "e1bf53d6-c82e-485a-ae76-574b64d36952"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'top_paises_por_mes' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-54-6ae9b3590011>\u001b[0m in \u001b[0;36m<cell line: 10>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubplots\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrp\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtop_paises_por_mes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Country'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m     \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgrp\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Month'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgrp\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Total'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'top_paises_por_mes' is not defined"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#Valor de venda total por mês e por país (considere apenas os top 10)\n",
        "vendas_per_country = df.groupby(['Month', 'Country'])['Total'].sum().reset_index()\n",
        "\n",
        "\n",
        "vendas_per_country = vendas_per_country.sort_values(by='Total' , ascending=False)\n",
        "\n",
        "vendas_per_country.head(10)\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(10, 6))\n",
        "for key, grp in top_paises_por_mes.groupby('Country'):\n",
        "    ax.bar(grp['Month'], grp['Total'], label=key)\n",
        "\n",
        "# Adicionar rótulos e título\n",
        "plt.xlabel('Mês')\n",
        "plt.ylabel('Vendas')\n",
        "plt.title('Top 10 Países por Mês')\n",
        "plt.xticks(rotation=45)\n",
        "plt.legend(title='País', bbox_to_anchor=(1.05, 1), loc='upper left')\n",
        "\n",
        "# Exibir o gráfico\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y7Bhu0rvB7Zv",
        "outputId": "f6571b41-db21-4d07-d686-af34be4a69cd"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Timestamp('2011-01-09 14:36:00')"
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ],
      "source": [
        "df['InvoiceDate'].max()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Agrupando os clientes e pedido de compra por data e preço total\n",
        "\n",
        "df.head(5)\n",
        "\n",
        "identify = df.groupby(['InvoiceNo', 'InvoiceDate'])['Total'].sum()\n",
        "\n",
        "client = identify.groupby(['InvoiceNo']).sum()\n",
        "\n",
        "client.head(5)\n",
        "\n",
        "\n",
        "# 1. Recency (R)\n",
        "recency_df = df.groupby('InvoiceNo')['InvoiceDate'].max()\n",
        "recency_df = pd.to_datetime('now') - recency_df\n",
        "recency_df = recency_df.dt.days  # Convertendo para o formato de dias\n",
        "\n",
        "# 2. Frequency (F)\n",
        "frequency_df = df.groupby('InvoiceNo')['InvoiceNo'].nunique()\n",
        "\n",
        "# 3. Monetary (M)\n",
        "monetary_df = df.groupby('InvoiceNo')['Total'].sum()\n",
        "\n",
        "# Criando o DataFrame final RFM\n",
        "rfm_df = pd.DataFrame({\n",
        "    'Recency': recency_df,\n",
        "    'Frequency': frequency_df,\n",
        "    'Monetary': monetary_df\n",
        "})\n",
        "\n",
        "rfm_df = pd.DataFrame({\n",
        "    'CustomerID': recency_df.index,\n",
        "    'R': recency_df.values,\n",
        "    'F': frequency_df.values,\n",
        "    'M': monetary_df.values\n",
        "})\n",
        "\n",
        "# Mostrar os primeiros 5 registros do DataFrame RFM\n",
        "print(rfm_df.head())\n",
        "\n",
        "# Salvar o DataFrame final como um novo arquivo CSV de saída\n",
        "output_file = 'rfm_output.csv'\n",
        "rfm_df.to_csv(output_file, index=False)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UPNGA47EmdLN",
        "outputId": "2b64c895-1eca-4f30-ce26-da57c88c2fdd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  CustomerID     R  F       M\n",
            "0     536365  4847  1  139.12\n",
            "1     536366  4847  1   22.20\n",
            "2     536367  4847  1  278.73\n",
            "3     536368  4847  1   70.05\n",
            "4     536369  4847  1   17.85\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-81-fb9f34532c99>:14: FutureWarning: The parsing of 'now' in pd.to_datetime without `utc=True` is deprecated. In a future version, this will match Timestamp('now') and Timestamp.now()\n",
            "  recency_df = pd.to_datetime('now') - recency_df\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMs0nBFyWvJB24U4WLHqvqG",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}